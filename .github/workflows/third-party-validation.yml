name: JurisRank CI (third-party style)

on: 
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  unit_integration:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.11, 3.12]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Run unit tests
        run: |
          pytest tests/test_basic.py -v --maxfail=1
          
      - name: Run integration tests
        run: |
          python test_integration.py
          
      - name: Run documentation validation
        run: |
          python test_documentation.py
          
      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-reports-${{ matrix.python-version }}
          path: |
            *.log
            *_report.json

  openapi_validation:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install OpenAPI tools
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          npm install -g @stoplight/spectral-cli redoc-cli
          
      - name: Validate OpenAPI schema
        run: |
          # Check if schema exists and is valid JSON
          if [ -f "openapi_schema.json" ]; then
            echo "‚úÖ OpenAPI schema file found"
            jq empty openapi_schema.json && echo "‚úÖ Valid JSON format"
            
            # Basic OpenAPI validation
            jq -r '.openapi, .info.title, .info.version' openapi_schema.json
            
            # Count endpoints
            ENDPOINTS=$(jq '.paths | keys | length' openapi_schema.json)
            echo "üìä Documented endpoints: $ENDPOINTS"
            
            if [ "$ENDPOINTS" -lt 5 ]; then
              echo "‚ö†Ô∏è Warning: Less than 5 endpoints documented"
            else
              echo "‚úÖ Good endpoint coverage"
            fi
          else
            echo "‚ùå OpenAPI schema file not found"
            exit 1
          fi
          
      - name: Generate documentation
        run: |
          if [ -f "openapi_schema.json" ]; then
            redoc-cli build openapi_schema.json --output docs.html
            echo "‚úÖ Generated HTML documentation"
          fi
          
      - name: Upload OpenAPI artifacts
        uses: actions/upload-artifact@v3
        with:
          name: openapi-docs
          path: |
            openapi_schema.json
            docs.html

  external_http_checks:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
          
      - name: Install dependencies
        run: |
          pip install requests
          sudo apt-get update && sudo apt-get install -y jq curl
          
      - name: Run external API validation
        env:
          BASE_URL: ${{ vars.JURISRANK_BASE_URL || 'https://5000-i09td971cyg7b4ytmaaxl.e2b.dev' }}
        run: |
          echo "üåê Testing external API at: $BASE_URL"
          
          # Health check
          echo "=== Health Check ==="
          HEALTH_RESPONSE=$(curl -sS -w "\n%{http_code}" "$BASE_URL/health" || echo "FAILED")
          echo "$HEALTH_RESPONSE"
          
          # API Status check
          echo "=== API Status Check ==="
          STATUS_RESPONSE=$(curl -sS -w "\n%{http_code}" "$BASE_URL/api/v1/status" || echo "FAILED")
          echo "$STATUS_RESPONSE"
          
          # OpenAPI endpoint check
          echo "=== OpenAPI Endpoint Check ==="
          OPENAPI_RESPONSE=$(curl -sS -w "\n%{http_code}" "$BASE_URL/api/v1/openapi.json" || echo "FAILED")
          if echo "$OPENAPI_RESPONSE" | tail -1 | grep -q "200"; then
            echo "‚úÖ OpenAPI endpoint accessible"
            echo "$OPENAPI_RESPONSE" | head -n -1 | jq -r '.info.title, .info.version' 2>/dev/null || echo "Response not JSON"
          else
            echo "‚ö†Ô∏è OpenAPI endpoint issues"
          fi
          
          # Docs endpoint check  
          echo "=== Swagger UI Check ==="
          DOCS_RESPONSE=$(curl -sS -I "$BASE_URL/docs" | head -1 || echo "FAILED")
          echo "$DOCS_RESPONSE"
          
      - name: Run comprehensive contract validation
        env:
          BASE_URL: ${{ vars.JURISRANK_BASE_URL || 'https://5000-i09td971cyg7b4ytmaaxl.e2b.dev' }}
        run: |
          echo "üîç Running comprehensive API contract validation"
          python test_api_contract_validation.py "$BASE_URL" || echo "Contract validation had issues"
          
      - name: Upload validation reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: external-validation-reports
          path: |
            api_contract_validation_report.json
            openapi_schema.json

  security_audit:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11
          
      - name: Install security tools
        run: |
          pip install bandit safety
          
      - name: Run security scan
        run: |
          echo "üõ°Ô∏è Running security audit"
          bandit -r src/ -ll || true
          safety check || true
          
      - name: Security headers check
        env:
          BASE_URL: ${{ vars.JURISRANK_BASE_URL || 'https://5000-i09td971cyg7b4ytmaaxl.e2b.dev' }}
        run: |
          echo "üîí Checking security headers"
          curl -I "$BASE_URL/health" 2>/dev/null | grep -iE "(content-security-policy|x-frame-options|x-content-type|x-xss-protection|referrer-policy)" || echo "Some security headers missing"

  deployment_readiness:
    runs-on: ubuntu-latest
    needs: [unit_integration, openapi_validation, external_http_checks]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate release readiness
        run: |
          echo "üìã Checking deployment readiness"
          
          # Check required files
          REQUIRED_FILES=(
            "README.md"
            "SECURITY_CHECKLIST.md" 
            "CONTRIBUTING.md"
            "EXTERNAL_ACCESS_VERIFICATION_REPORT.md"
            "RELEASE_NOTES_v0.9.0-open.md"
            "openapi_schema.json"
          )
          
          MISSING_FILES=()
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              MISSING_FILES+=("$file")
            fi
          done
          
          if [ ${#MISSING_FILES[@]} -eq 0 ]; then
            echo "‚úÖ All required documentation files present"
          else
            echo "‚ùå Missing files: ${MISSING_FILES[*]}"
            exit 1
          fi
          
          # Check documentation quality
          README_LINES=$(wc -l < README.md)
          if [ "$README_LINES" -gt 100 ]; then
            echo "‚úÖ README has sufficient content ($README_LINES lines)"
          else
            echo "‚ö†Ô∏è README might be too brief ($README_LINES lines)"
          fi
          
          echo "üéâ Deployment readiness check completed"