name: JurisRank API Contract Validation

on:
  push:
    branches: [ main, develop, genspark_ai_developer ]
  pull_request:
    branches: [ main ]

jobs:
  api-contract-validation:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run basic unit tests
      run: |
        python -m pytest tests/test_basic.py -v --cov=src --cov-report=xml
        
    - name: Start mock API server
      run: |
        # Install supervisor for daemon management
        pip install supervisor
        
        # Start supervisor daemon with mock API
        supervisord -c supervisord_mock.conf
        sleep 5  # Wait for server to start
        
        # Verify server is running
        supervisorctl -c supervisord_mock.conf status
        
    - name: Run API contract validation
      run: |
        # Run comprehensive API contract validation
        python test_api_contract_validation.py http://localhost:5000
        
    - name: Run integration tests
      run: |
        python test_integration.py
        
    - name: Run performance tests
      run: |
        python test_performance.py
        
    - name: Run documentation validation
      run: |
        python test_documentation.py
        
    - name: Run advanced ingestion tests (Patent P7)
      run: |
        python test_advanced_ingestion.py
        
    - name: Run scraping simulation tests
      run: |
        python test_scraping_simulation.py
        
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        
    - name: Check API contract success rate
      run: |
        # Verify API contract validation passed with >90% success rate
        python -c "
        import json
        with open('api_contract_validation_report.json', 'r') as f:
            report = json.load(f)
        success_rate = float(report['success_rate'].rstrip('%'))
        print(f'API Contract Success Rate: {success_rate}%')
        if success_rate < 90.0:
            print('❌ FAILURE: API contract success rate below 90%')
            exit(1)
        else:
            print('✅ SUCCESS: API contract validation passed')
        "
        
    - name: Validate OpenAPI schema
      run: |
        # Check if OpenAPI schema was generated
        if [ ! -f "openapi_schema.json" ]; then
            echo "❌ FAILURE: OpenAPI schema not generated"
            exit 1
        fi
        
        # Validate schema format
        python -c "
        import json
        with open('openapi_schema.json', 'r') as f:
            schema = json.load(f)
        
        # Check required OpenAPI fields
        required_fields = ['openapi', 'info', 'paths']
        missing = [f for f in required_fields if f not in schema]
        
        if missing:
            print(f'❌ FAILURE: Missing OpenAPI fields: {missing}')
            exit(1)
            
        print('✅ SUCCESS: OpenAPI schema is valid')
        print(f'📊 Documented endpoints: {len(schema[\"paths\"])}')
        print(f'🔖 API version: {schema[\"info\"][\"version\"]}')
        "
        
    - name: Security headers validation
      run: |
        # Test security headers implementation
        python -c "
        import requests
        try:
            response = requests.get('http://localhost:5000/health')
            headers = response.headers
            
            security_headers = [
                'X-Content-Type-Options',
                'X-Frame-Options', 
                'X-XSS-Protection',
                'Referrer-Policy',
                'Content-Security-Policy'
            ]
            
            missing_headers = [h for h in security_headers if h not in headers]
            
            if missing_headers:
                print(f'⚠️  WARNING: Missing security headers: {missing_headers}')
            else:
                print('✅ SUCCESS: All core security headers present')
                
            print(f'🛡️  Security headers found: {len([h for h in security_headers if h in headers])}/5')
            
        except Exception as e:
            print(f'❌ FAILURE: Could not validate security headers: {e}')
            exit(1)
        "
        
    - name: Stop mock server
      if: always()
      run: |
        supervisorctl -c supervisord_mock.conf stop mock_api || true
        supervisorctl -c supervisord_mock.conf shutdown || true
        
    - name: Archive test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports-python-${{ matrix.python-version }}
        path: |
          api_contract_validation_report.json
          openapi_schema.json
          coverage.xml
          *.log

  validate-documentation:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Validate documentation completeness
      run: |
        # Check required documentation files exist
        required_docs=(
          "README.md"
          "API_DOCUMENTATION.md" 
          "SECURITY_CHECKLIST.md"
          "CONTRIBUTING.md"
          "EXTERNAL_ACCESS_VERIFICATION_REPORT.md"
          "CODE_OF_CONDUCT.md"
        )
        
        missing_docs=()
        for doc in "${required_docs[@]}"; do
            if [ ! -f "$doc" ]; then
                missing_docs+=("$doc")
            fi
        done
        
        if [ ${#missing_docs[@]} -gt 0 ]; then
            echo "❌ FAILURE: Missing documentation files:"
            printf '%s\n' "${missing_docs[@]}"
            exit 1
        else
            echo "✅ SUCCESS: All required documentation present"
        fi
        
    - name: Check documentation quality
      run: |
        # Basic documentation quality checks
        echo "📚 Documentation Quality Report:"
        
        for file in README.md CONTRIBUTING.md API_DOCUMENTATION.md; do
            if [ -f "$file" ]; then
                lines=$(wc -l < "$file")
                words=$(wc -w < "$file")
                echo "📄 $file: $lines lines, $words words"
                
                # Check for minimum content requirements
                if [ "$lines" -lt 50 ]; then
                    echo "⚠️  WARNING: $file might be too brief ($lines lines)"
                fi
            fi
        done
        
        echo "✅ Documentation quality check completed"

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
        
    - name: Install security scanning tools
      run: |
        pip install bandit safety
        
    - name: Run Bandit security scan
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -ll
        
    - name: Run Safety dependency check  
      run: |
        safety check --json --output safety-report.json || true
        safety check
        
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json